<?php

/**
 * @file
 * Defines base features for the Alingsås Intranet project.
 */

/**
 * Implements hook_entity_info_alter().
 */
function alingsasintra_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_result_teaser'] = array(
      'label' => t('Search result teaser'),
      'custom settings' => TRUE,
  );
}

/**
  * Implements hook_menu().
  */
function alingsasintra_menu() {
  $items['admin/ldap/sync/groups'] = array(
      'page callback' => '_alingsasintra_ldap_sync_groups',
      'access arguments' => array('administer users'),
      'type' => MENU_CALLBACK,
  );
  $items['admin/ldap/sync/users'] = array(
      'page callback' => '_alingsasintra_ldap_sync_users',
      'access arguments' => array('administer users'),
      'type' => MENU_CALLBACK,
  );
  $items['bookmark/%/add'] = array(
      'page callback' => '_alingsasintra_ajax_add_bookmark',
      'page arguments' => array(1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['bookmark/%/delete'] = array(
      'page callback' => '_alingsasintra_ajax_delete_bookmark',
      'page arguments' => array(1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['bookmark/%/update'] = array(
      'page callback' => '_alingsasintra_ajax_update_bookmark',
      'page arguments' => array(1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['bookmark/%/check'] = array(
      'page callback' => '_alingsasintra_ajax_check_bookmark',
      'page arguments' => array(1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['news/get/%/%'] = array(
      'page callback' => '_alingsasintra_ajax_get_news',
      'page arguments' => array(2,3),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['user/edit-contact'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('alingsasintra_usercontact_form'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['user/edit-favorites'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('alingsasintra_userfavorites_form'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['user/edit-newsfeed'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('alingsasintra_usernewsfeed_form'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['events'] = array(
      'page callback' => '_alingsasintra_events_overview',
      'page arguments' => array(),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['status/%'] = array(
      'page callback' => '_alingsasintra_status',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['search'] = array(
      'page callback' => '_alingsasintra_search',
      'page arguments' => array(),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['search/%'] = array(
      'page callback' => '_alingsasintra_search',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['news/mynews'] = array(
      'page callback' => '_alingsasintra_news_mynews',
      'page arguments' => array(),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['news/publicnews'] = array(
      'page callback' => '_alingsasintra_news_publicnews',
      'page arguments' => array(),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['news/byterm/%'] = array(
      'page callback' => '_alingsasintra_news_byterm',
      'page arguments' => array(2),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  /*$items['debug'] = array(
      'page callback' => '_alingsasintra_access_update_7101',
      'page arguments' => array(),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );*/
  return $items;
}

function _alingsasintra_news_mynews() {
  global $user;
  $page = $_GET['page'] ? $_GET['page'] : 0;
  $items = _alingsasintra_news_query('mynews', $user, 30, $page);
  drupal_set_title('Mina nyheter');
  $output = '<div class="m news-listing company-news">';
  $pager_items = 5;
  if(count($items['items'])) {
    $output .= '<ul>';
    $nodes = node_load_multiple($items['items']);
    foreach($nodes as $node) {
      $content_array = node_view($node, 'teaser', NULL);
      $output .= '<li class="cf">' . render($content_array) . '</li>';
    }
    $output .= '</ul>';
    if($items['count'] > 30) {
      $output .= _alingsasintra_pager($items['count'], $page, $pager_items, '/news/mynews?');
    }
  }
  else {
    $output .= '<p>Ingen nyheter hittades.</p><br/>';
  }
  $output .= '</div>';
  return array('#markup' => $output);
}

function _alingsasintra_news_publicnews() {
  global $user;
  $page = $_GET['page'] ? $_GET['page'] : 0;
  $items = _alingsasintra_news_query('publicnews', $user, 30, $page);
  drupal_set_title('Alla nyheter');
  $output = '<div class="m news-listing company-news">';
  $pager_items = 5;
  if(count($items['items'])) {
    $output .= '<ul>';
    $nodes = node_load_multiple($items['items']);
    foreach($nodes as $node) {
      $content_array = node_view($node, 'teaser', NULL);
      $output .= '<li class="cf">' . render($content_array) . '</li>';
    }
    $output .= '</ul>';
    if($items['count'] > 30) {
      $output .= _alingsasintra_pager($items['count'], $page, $pager_items, '/news/mynews?');
    }
  }
  else {
    $output .= '<p>Ingen nyheter hittades.</p><br/>';
  }
  $output .= '</div>';
  return array('#markup' => $output);
}

function _alingsasintra_news_byterm($tid) {
  global $user;
  $page = $_GET['page'] ? $_GET['page'] : 0;
  $term = taxonomy_term_load($tid);
  $items = _alingsasintra_news_query('byterm', $user, 30, $page, $term);
  drupal_set_title('Nyheter för '.$term->name);
  $output = '<div class="m news-listing company-news">';
  $pager_items = 5;
  if(count($items['items'])) {
    $output .= '<ul>';
    $nodes = node_load_multiple($items['items']);
    foreach($nodes as $node) {
      $content_array = node_view($node, 'teaser', NULL);
      $output .= '<li class="cf">' . render($content_array) . '</li>';
    }
    $output .= '</ul>';
    if($items['count'] > 30) {
      $output .= _alingsasintra_pager($items['count'], $page, $pager_items, '/news/byterm/'.$term->tid.'?');
    }
  }
  else {
    $output .= '<p>Ingen nyheter hittades.</p><br/>';
  }
  $output .= '</div>';
  return array('#markup' => $output);
}

function _alingsasintra_ajax_get_news($type, $page=0) {
  $content = '';
  $count = 0;
  if($type == 'mynews') {
    global $user;
    $items = _alingsasintra_news_query('mynews', $user, 10, $page);
    if(count($items['items'])) {
      $count = $items['count'];
      $nodes = node_load_multiple($items['items']);
    }
    foreach($nodes as $node) {
      $content_array = node_view($node, 'teaser', NULL);
      $content .= '<li class="cf">' . render($content_array) . '</li>';
    }
  }
  else {
    global $user;
    $items = _alingsasintra_news_query('publicnews', $user, 10, $page);
    if(count($items['items'])) {
      $count = $items['count'];
      $nodes = node_load_multiple($items['items']);
    }
    foreach($nodes as $node) {
      $content_array = node_view($node, 'teaser', NULL);
      $content .= '<li class="cf">' . render($content_array) . '</li>';
    }
  }
  drupal_json_output(array(
      'success' => 'true',
      'total_rows' => $count,
      'content' => $content));
}

function _alingsasintra_news_query($type, $user, $show=30, $page=0, $term=false) {
  $user_data = user_load($user->uid);
  $access_keys = unserialize($user_data->field_access_keys[LANGUAGE_NONE][0]['value']);
  $items = array();
  $count = 0;
  $start = $page ? $page*$show : 0;
  if($type == 'mynews') {
    $result = false;
    $start = $page ? $page*$show : 0;
    $date = date('Y-m-d H:i:s');
    //basic stuff
    $query = "SELECT DISTINCT node.nid, field_data_field_publishdate.field_publishdate_value FROM node
    LEFT JOIN alingsasintra_access_keys ON node.nid = alingsasintra_access_keys.nid
    LEFT JOIN field_data_field_publishdate ON node.nid = field_data_field_publishdate.entity_id
    LEFT JOIN field_data_field_unpublishdate ON node.nid = field_data_field_unpublishdate.entity_id
    WHERE node.type='news'
    AND node.status=1
    AND field_data_field_publishdate.field_publishdate_value <= '".$date."'
    AND field_data_field_unpublishdate.field_unpublishdate_value >= '".$date."'
    AND node.promote=1
    AND ( node.uid=".$user->uid." OR alingsasintra_access_keys.keystring IN ('".join("','", $access_keys)."'))";
    $result = db_query($query);
    $count = $result->rowCount();
    if($count > 0) {
      $result = db_query($query." ORDER BY field_data_field_publishdate.field_publishdate_value DESC LIMIT ".$start.",".$show);
    }
    if($result) {
      $items = $result->fetchCol(0);
    }
  }
  elseif($type == 'byterm') {
    $result = false;
    if($term) {
      $start = $page ? $page*$show : 0;
      $date = date('Y-m-d H:i:s');
      //basic stuff
      $query = "SELECT DISTINCT node.nid, field_data_field_publishdate.field_publishdate_value FROM node
      LEFT JOIN taxonomy_index ON node.nid = taxonomy_index.nid
      LEFT JOIN field_data_field_publishdate ON node.nid = field_data_field_publishdate.entity_id
      LEFT JOIN field_data_field_unpublishdate ON node.nid = field_data_field_unpublishdate.entity_id
      WHERE node.type='news'
      AND node.status=1
      AND field_data_field_publishdate.field_publishdate_value <= '".$date."'
      AND field_data_field_unpublishdate.field_unpublishdate_value >= '".$date."'
      AND node.promote=1
      AND taxonomy_index.tid='".$term->tid."'";
      $result = db_query($query);
      $count = $result->rowCount();
      if($count > 0) {
        $result = db_query($query." ORDER BY field_data_field_publishdate.field_publishdate_value DESC LIMIT ".$start.",".$show);
      }
    }
    if($result) {
      $items = $result->fetchCol(0);
    }
  }
  elseif($type == 'byorganisation') {
    $result = false;
    if($term) {
      $start = $page ? $page*$show : 0;
      $date = date('Y-m-d H:i:s');
      //basic stuff
      $query = "SELECT DISTINCT node.nid, field_data_field_publishdate.field_publishdate_value FROM node
      LEFT JOIN taxonomy_index ON node.nid = taxonomy_index.nid
      LEFT JOIN alingsasintra_access_keys ON node.nid = alingsasintra_access_keys.nid
      LEFT JOIN field_data_field_publishdate ON node.nid = field_data_field_publishdate.entity_id
      LEFT JOIN field_data_field_unpublishdate ON node.nid = field_data_field_unpublishdate.entity_id
      WHERE node.type='news'
      AND node.status=1
      AND field_data_field_publishdate.field_publishdate_value <= '".$date."'
      AND field_data_field_unpublishdate.field_unpublishdate_value >= '".$date."'
      AND node.promote=1
      AND taxonomy_index.tid='".$term->tid."'
      AND alingsasintra_access_keys.keystring NOT LIKE '%t_%'";
      $result = db_query($query);
      $count = $result->rowCount();
      if($count > 0) {
        $result = db_query($query." ORDER BY field_data_field_publishdate.field_publishdate_value DESC LIMIT ".$start.",".$show);
      }
    }
    if($result) {
      $items = $result->fetchCol(0);
    }
  }

  else {
    $result = false;
    $date = date('Y-m-d H:i:s');
    //basic stuff
    $query = "SELECT DISTINCT node.nid, field_data_field_publishdate.field_publishdate_value FROM node
    LEFT JOIN field_data_field_publishdate ON node.nid = field_data_field_publishdate.entity_id
    LEFT JOIN field_data_field_unpublishdate ON node.nid = field_data_field_unpublishdate.entity_id
    WHERE node.type='news'
    AND node.status=1
    AND field_data_field_publishdate.field_publishdate_value <= '".$date."'
    AND field_data_field_unpublishdate.field_unpublishdate_value >= '".$date."'
    AND node.promote=0";
    $result = db_query($query);
    $count = $result->rowCount();
    if($count > 0) {
      $result = db_query($query." ORDER BY field_data_field_publishdate.field_publishdate_value DESC LIMIT ".$start.",".$show);
    }
    if($result) {
      $items = $result->fetchCol(0);
    }
  }
  return array('count' => $count, 'items' => $items);
}

function _alingsasintra_search($type) {
  $target = $_REQUEST['search_target'];
  if(!$target) {
    $target = 'content';
  }
  if($type == 'rutiner') {
    $type = '/'.$type;
    $target = 'document';
  }
  elseif($type) {
    if($endpoints = variable_get('alingsasintra_alfresco_search', false)) {
      foreach($endpoints as $key=>$value) {
        if($value['type'] == $type) {
          $target = 'document';
          break;
        }
      }
    }
    $type = '/'.$type;
  }

  switch($target) {
    case 'person':
      menu_set_active_item('sok-anvandare');
      menu_execute_active_handler();
      break;
    case 'document':
      $query = $_REQUEST['search_api_views_fulltext'];
      $_GET['query'] = $_REQUEST['search_api_views_fulltext'];
      $_REQUEST['query'] = $_REQUEST['search_api_views_fulltext'];
      $_GET['page'] = $_REQUEST['page'];
      menu_set_active_item('alfresco/search'.$type);
      menu_execute_active_handler();
      break;
    default:
      menu_set_active_item('sok');
      menu_execute_active_handler();
      break;
  }
}

function _alingsasintra_status($status) {
  if($status == 403) {
    drupal_set_title('Du har inte behörighet till denna sida.');
  }
  else {
    drupal_set_title('Sidan hittades inte.');
  }
  return array('#markup' => '');
}

function _alingsasintra_events_overview() {
  drupal_set_title('Aktiviteter och kurser');
  global $user;
  $user_data = user_load($user->uid);
  $terms = array();
  $output = '';
  foreach($user_data->field_organizational_structure[LANGUAGE_NONE] as $term) {
    $terms[] = $term['tid'];
  }
  if(count($terms)) {
    $show = 30;
    $start = 0;
    $page = 0;
    $pager_items = 5;
    if($_GET['page']) {
      $page = intval($_GET['page']);
      $start = $page * $show - 1;
    }
    $date = date('Y-m-d H:i:s');
    $result = db_query("SELECT DISTINCT node.nid, field_data_field_date.field_date_value FROM node
        LEFT JOIN taxonomy_index ON node.nid = taxonomy_index.nid LEFT JOIN field_data_field_date ON node.nid = field_data_field_date.entity_id
        WHERE node.type='event'
        AND node.status=1
        AND field_data_field_date.field_date_value >= '".$date."'
        AND (taxonomy_index.tid IN (".join(',', $terms).") OR node.promote=0)
        ORDER BY field_data_field_date.field_date_value");
    if($result->rowCount() > 0) {
      $count = $result->rowCount();
      $result = db_query("SELECT DISTINCT node.nid, field_data_field_date.field_date_value FROM node
          LEFT JOIN taxonomy_index ON node.nid = taxonomy_index.nid LEFT JOIN field_data_field_date ON node.nid = field_data_field_date.entity_id
          WHERE node.type='event'
          AND node.status=1
          AND field_data_field_date.field_date_value >= '".$date."'
          AND (taxonomy_index.tid IN (".join(',', $terms).") OR node.promote=0)
          ORDER BY field_data_field_date.field_date_value
          LIMIT ".$start.",".$show);
    }
  }
  if($result) {
    $event = array();
    foreach(node_load_multiple($result->fetchCol(0)) as $e) {
      $wrapper = entity_metadata_wrapper('node', $e);
      $link = url('node/'.$e->nid);
      $title = $wrapper->title->value(array('sanitize' => TRUE));
      $date = $wrapper->field_date->value();
      $date = format_date(strtotime($date['value']), 'long');
      $body = $wrapper->field_introduction->value();
      $events[] = <<<EOL
        <li class="cf">
          <h3><a href="{$link}">{$title}</a></h3>
				<span class="date">{$date}</span>
				<p>{$body}</p>
        </li>
EOL;
    }
    if(count($events)) {
      $pager = _alingsasintra_pager($count, $page, $pager_items, '/events?');
      $events = join(' ', $events);
      $output .= <<<EOL
      <div class="m news-listing company-news unit">
  <div class="m-c cf">
	  	          <ul>{$events}</ul>
	  	          {$pager}
  </div>
</div>
EOL;
    }
    else {
      $output .= <<<EOL

	  	          <p>Ingen aktiviteter eller kurser hittades.</p>
	  	          <br/>

EOL;
    }
    return array('#markup' => $output);
  }
}

function alingsasintra_menu_alter(&$items) {
  $items['user/%user/edit']['access callback'] = 'alingsasintra_edit_access';
}

function alingsasintra_edit_access($account) {
  return user_access('administer users') && $account->uid > 0;
}

function _alingsasintra_pager($all, $page, $show, $url) {
  $pager = '';
  $pager_items = 5;
  $start = 0;
  $items = array();
  //special case where the total count is unknown.
  if($all === false) {
    if($page > 0) {
      $items[] = '<li class="pager-first first"><a title="Gå till första sidan" href="'.$url.'">« första</a></li>';
      $items[] = '<li class="pager-previous"><a title="Gå till föregående sida" href="'.$url.'&page='.($page - 1).'">‹ föregående</a></li>';
      for($i=$pager_items-1; $i > 0; $i--) {
        $attr = array();
        if($page-$i >= 0) {
          $items[] = '<li class="'.join(' ',$attr).' pager-item"><a title="Gå till sida'.($page-$i+1).'" href="'.$url.'&page='.($page-$i).'">'.($page-$i+1).'</a></li>';
        }
      }
    }
    else {
      $attr[] = 'pager-first';
    }
    $items[] = '<li class="'.join(' ',$attr).' pager-current pager-item"><a title="Gå till sida'.($page+1).'" href="'.$url.'&page='.$page.'">'.($page+1).'</a></li>';
    $items[] = '<li class="pager-next"><a title="Gå till nästa sida" href="'.$url.'&page='.($page+1).'">nästa ›</a></li>';
  }
  elseif($all > $show) {
    $pages = ceil($all/$show)-1;
    $end = $pages;
    if($pages > $pager_items) {
      if($page > ($pager_items/2)) {
        $start = $page-2;
      }
      if(($page+2) < $pages) {
        $end = $start+4;
      }
      else {
        $start = $pages-4;
      }
    }
    if($page > 0) {
      $items[] = '<li class="pager-first first"><a title="Gå till första sidan" href="'.$url.'">« första</a></li>';
      $items[] = '<li class="pager-previous"><a title="Gå till föregående sida" href="'.$url.'&page='.($page - 1).'">‹ föregående</a></li>';
    }
    for($i=$start; $i<=$end; $i++) {
      $attr = array();
      if($i == $page) {
        $attr[] = 'pager-current';
      }
      if(!count($items)) {
        $attr[] = 'pager-first';
      }
      $items[] = '<li class="'.join(' ',$attr).' pager-item"><a title="Gå till sida'.($i+1).'" href="'.$url.'&page='.$i.'">'.($i+1).'</a></li>';
    }
    if($page < $pages) {
      $items[] = '<li class="pager-next"><a title="Gå till nästa sida" href="'.$url.'&page='.($page+1).'">nästa ›</a></li>';
      $items[] = '<li class="pager-last last"><a title="Gå till sista sidan" href="'.$url.'&page='.$pages.'">sista »</a></li>';
    }
  }
  if(count($items)) {
    $entries = join('', $items);
    $pager = <<<EOF
    <div class="paging cf">
      <h2 class="element-invisible">Sidor</h2>
      <div class="item-list">
        <ul class="pager">
          {$entries}
        </ul>
      </div>
    </div>
EOF;
  }
  return $pager;

}

function _alingsasintra_ajax_add_bookmark($nid = null) {
  global $user;
  $user = user_load($user->uid);
  if($nid) {
    $node = node_load($nid);
    if($node) {
      $title = strip_tags($node->title);
      if(strlen($title) > 50){
        $title = substr($title,0,47)."...";
      }
      $user->field_bookmarks[LANGUAGE_NONE][] = array(
            "url" => "node/".$nid,
            "title"=> $title,
            "attributes" =>  array(
                "target" => "",
            )
          );
      user_save($user);
      drupal_json_output(array('success' => 'true'));
      return;
    }
  }
  drupal_json_output(array('success' => 'false'));
}

function _alingsasintra_ajax_delete_bookmark($nid = null) {
  global $user;
  if(strpos($nid, 'item-') !== FALSE ){
    $account = entity_metadata_wrapper('user', $user);
    $delta = substr($nid, 5);
    $account->field_bookmarks[$delta]->set();
    $account->save();
    drupal_json_output(array('success' => 'true', 'message' => 'Item deleted successfully.'));
    return;
  }
  else {
    $user = user_load($user->uid);
    if($nid && count($user->field_bookmarks[LANGUAGE_NONE]) > 0) {
      $bookmarks = $user->field_bookmarks[LANGUAGE_NONE];
      foreach($bookmarks as &$bookmark) {
        if($bookmark['url'] == 'node/'.$nid){
          $bookmark["url"] = '';
          $bookmark["title"]= '';
          $bookmark["attributes"] =  array();
          break;
        }
      }
      $user->field_bookmarks[LANGUAGE_NONE] = array_values($bookmarks);
      user_save($user);
      drupal_json_output(array('success' => 'true'));
      return;
    }
  }
  drupal_json_output(array('success' => 'false'));
}

function _alingsasintra_ajax_update_bookmark($nid = null) {
  global $user;
  $user = user_load($user->uid);
  if(count($user->field_bookmarks[LANGUAGE_NONE])) {
    $bookmarks = $user->field_bookmarks[LANGUAGE_NONE];

  }
  //resort favourites.
  return drupal_json_output(array('success' => 'false'));
}

function _alingsasintra_ajax_check_bookmark($nid = null) {
  global $user;
  $user = user_load($user->uid);
  if($nid && count($user->field_bookmarks[LANGUAGE_NONE]) > 0) {
    $bookmarks = $user->field_bookmarks[LANGUAGE_NONE];
    foreach($bookmarks as &$bookmark) {
      if($bookmark['url'] == 'node/'.$nid){
        drupal_json_output(array('success' => 'true'));
        return;
        break;
      }
    }
  }
  drupal_json_output(array('success' => 'false'));
}

/**
 * Cron jobs for syncing stuff.
 */
function alingsasintra_cron() {

  /* run LDAP-group-sync once every 24h */
  $lastsync = variable_get('alingsasintra_ldap_lastsync', 0);
  if($_GET['FORCE'] || $lastsync < (time()-(24*60*60))){
    drupal_set_message("Running LDAP-group-sync...");
    _alingsasintra_ldap_sync_groups(TRUE);
  }

  /*$lastsync = variable_get('alingsasintra_ldap_users_lastsync', 0);
  if($lastsync < (time()-(24*60*60))){
    drupal_set_message("Running LDAP-user-sync...");
    _alingsasintra_ldap_sync_users(TRUE);
  }*/
}

/**
 * Run ldap_sync for groups.
 */
function _alingsasintra_ldap_sync_groups($intern = FALSE) {
  $lasthash = variable_get('alingsasintra_ldap_lasthash', '');
  if(!$intern) $lasthash = '';
  if($voc = taxonomy_vocabulary_machine_name_load('organizational_structure')){
    $queries = ldap_query_get_queries('ldap_group_hierarchy', 'enabled');
    $result = $queries['ldap_group_hierarchy']->query();
    $groups = array();
    $dns = array();
    for($i=0; $i < $result['count']; $i++) {
      if(isset($result[$i]['pidparentdn']['count'])) unset($result[$i]['pidparentdn']['count']);
      $groups[$result[$i]['dn']] = array('name' => $result[$i]['description'][0], 'parent' => $result[$i]['pidparentdn']);
    }

    if(count($groups)) {
      ksort($groups);
      //only run this if the group array differs.
      $hash = hash('md4', serialize($groups));
      if($hash !== $lasthash) {
        $count = 0;
        //Delete all items from queue.
        $queue = DrupalQueue::get('addLdapGroups', TRUE);
        $queue->deleteQueue();
        $queue = DrupalQueue::get('addLdapGroups', TRUE);
        foreach($groups as $key => $value){
          $dns[] = $key;
          $item = array();
          $item['vid'] = $voc->vid;
          $item['dn'] = $key;
          $item['parents'] = $value['parent'];
          $item['name'] = $value['name'];
          $queue->createItem($item);
          $count++;
        }
        $queue = DrupalQueue::get('removeLdapGroups', TRUE);
        $queue->createItem($dns);
        drupal_set_message("Added $count jobs (LDAP groups) to cron-queue. (DNs: ".count($dns).")");
        variable_set('alingsasintra_ldap_lastsync', time());
        variable_set('alingsasintra_ldap_lasthash', $hash);
      }
    }
    else {
      //Keep the old entries - LDAP is not reachable or doesn't return groups...
      drupal_set_message("The LDAP server didn't return any groups!", 'error');
    }
  }
  $lasthash = variable_get('alingsasintra_ldap_targetgroups_lasthash', '');
  if($voc = taxonomy_vocabulary_machine_name_load('target_groups')){
    $queries = ldap_query_get_queries('ldap_target_groups', 'enabled');
    $result = $queries['ldap_target_groups']->query();
    $groups = array();
    $dns = array();
    for($i=0; $i < $result['count']; $i++) {
      if($result[$i]['cn']) $result[$i]['cn'] = str_replace('AK-Role-Group-', '', $result[$i]['cn'][0]);
      $groups[$result[$i]['dn']] = array('name' => $result[$i]['cn']);
    }

    if(count($groups)) {
      ksort($groups);
      //only run this if the group array differs.
      $hash = hash('md4', serialize($groups));
      //dpm(print_r($groups, TRUE));
      if($hash !== $lasthash) {
        $count = 0;
        //Delete all items from queue.
        $queue = DrupalQueue::get('addLdapTargetGroups', TRUE);
        $queue->deleteQueue();
        $queue = DrupalQueue::get('addLdapTargetGroups', TRUE);
        foreach($groups as $key => $value){
          $dns[] = $key;
          $item = array();
          $item['vid'] = $voc->vid;
          $item['dn'] = $key;
          $item['name'] = $value['name'];
          $queue->createItem($item);
          $count++;
        }
        $queue = DrupalQueue::get('removeLdapTargetGroups', TRUE);
        $queue->createItem($dns);
        drupal_set_message("Added $count jobs (LDAP target groups) to cron-queue. (DNs: ".count($dns).")");
        variable_set('alingsasintra_ldap_lastsync', time());
        variable_set('alingsasintra_ldap_targetgroups_lasthash', $hash);
      }
    }
    else {
      //Keep the old entries - LDAP is not reachable or doesn't return groups...
      drupal_set_message("The LDAP server didn't return any target groups!", 'error');
    }
  }
  if(!$intern) {
    echo "Done!<br/>";
    var_dump(drupal_get_messages());
  }
}

/**
 * Run ldap_sync for users.
 */
function _alingsasintra_ldap_sync_users($intern = FALSE) {
  $lasthash = variable_get('alingsasintra_ldap_users_lasthash', '');
  if(!$intern) $lasthash = '';
  $queries = ldap_query_get_queries('ldap_users', 'enabled');
  $result = $queries['ldap_users']->query();
  $hash = hash('md4', serialize($result));

  if(isset($result['count']) && $result['count'] > 0 && $hash !== $lasthash) {

    $queue = DrupalQueue::get('addLdapUsers', TRUE);
    $queue->deleteQueue();
    $queue = DrupalQueue::get('addLdapUsers', TRUE);

    for($i=0; $i < $result['count']; $i++) {
      $mail = ($result[$i]['mail'][0]) ? $result[$i]['mail'][0] : $result[$i]['uid'].'@alingsas.se';
      if(isset($result[$i]['groupmembership']['count'])) unset($result[$i]['groupmembership']['count']);
      $user = array(
          'uid' => $result[$i]['uid'][0],
          'mail' => $mail,
          'groups' => $result[$i]['groupmembership'],
          'firstname' => $result[$i]['givenname'][0],
          'lastname' => $result[$i]['sn'][0],
          'ou' => $result[$i]['ou'][0],
      );
      $queue->createItem($user);
    }
    drupal_set_message("Added $i users (from LDAP) to cron-queue.");
    variable_set('alingsasintra_ldap_users_lastsync', time());
    variable_set('alingsasintra_ldap_users_lasthash', $hash);
  }
  else {
    //Keep the old entries - LDAP is not reachable or doesn't return groups...
    drupal_set_message("The LDAP server didn't return any users!", 'error');
  }
  if(!$intern) {
    echo "Done!<br/>";
    var_dump(drupal_get_messages());
  }
}


/**
 * Implements hook_cron_queue_info().
 */
function alingsasintra_cron_queue_info() {
  $queues = array();
  $queues['addLdapGroups'] = array(
      'worker callback' => '_worker_add_group',
      'time' => 60,
  );
  $queues['removeLdapGroups'] = array(
      'worker callback' => '_worker_delete_group',
      'time' => 60,
  );
  $queues['addLdapTargetGroups'] = array(
      'worker callback' => '_worker_add_targetgroup',
      'time' => 60,
  );
  $queues['removeLdapTargetGroups'] = array(
      'worker callback' => '_worker_delete_targetgroup',
      'time' => 60,
  );
  $queues['addLdapUsers'] = array(
      'worker callback' => '_worker_add_user',
      'time' => 60,
  );
  return $queues;
}

/**
 * Worker for user import
 */
function _worker_add_user($item) {
  if($user = user_load_by_name($item['uid'])) {
    //update user
  }
  else {
    //create user
  }
}

/**
 * Worker for group import
 */
function _worker_add_group($item) {
  $queue = DrupalQueue::get('addLdapGroups', TRUE);
  $newterm = new stdClass();
  $newterm->name = $item['name'];
  $newterm->vid = $item['vid'];
  $newterm->parent = array();
  $field_dn = array();
  $field_dn[LANGUAGE_NONE][0]['value'] = $item['dn'];
  $newterm->field_taxonomy_dn = $field_dn;
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $item['vid'])
    ->fieldCondition('field_taxonomy_dn', 'value', $item['dn'], '=', 0)
    ->execute();
  if(count($result)) {
    $term = array_keys($result['taxonomy_term']);
    $newterm->tid = $term[0];
  }

  if(!count($item['parents'])) {
    $newterm->parent[] = 0;
  }
  else {
    $query = new EntityFieldQuery();
    if(isset($item['parents']['count'])) unset($item['parents']['count']);
    $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $item['vid'])
    ->fieldCondition('field_taxonomy_dn', 'value', $item['parents'], 'IN', 0)
    ->execute();
    if(count($result)) {
      //ok we've found some parents
      $newterm->parent = array_keys($result['taxonomy_term']);
    }
  }
  if(count($newterm->parent) < count($item['parents'])) {
    /* parent element is not there: push it again to the queue */
    $status = taxonomy_term_save($newterm);
    if($status == SAVED_NEW) {
      drupal_set_message("Created term but rescheduled for check: ".$item['dn']);
    }
    elseif($status == SAVED_UPDATED) {
      drupal_set_message("Updated term but rescheduled for check: ".$item['dn']);
    }
    else {
      drupal_set_message("Error: Could not add term (rescheduled for adding). ".$item['dn'], 'error');
    }
    $queue->createItem($item);
  }
  elseif(count($newterm->parent)) {
    $status = taxonomy_term_save($newterm);
    if($status == SAVED_NEW) {
      drupal_set_message("Created new: ".$item['dn']);
    }
    elseif($status == SAVED_UPDATED) {
      drupal_set_message("Updated term : ".$item['dn']);
    }
    else {
      drupal_set_message("Error: Could not add term (rescheduled for adding). ".$item['dn'], 'error');
      $queue->createItem($item);
    }
  }
}

/**
 * Worker for group delete
 */
function _worker_delete_group($dns) {
  $voc = taxonomy_vocabulary_machine_name_load('organizational_structure');
  $terms = taxonomy_get_tree($voc->vid, 0, NULL, TRUE);
  $query = new EntityFieldQuery();
  $result = $query
  ->entityCondition('entity_type', 'taxonomy_term')
  ->propertyCondition('vid', $voc->vid)
  ->fieldCondition('field_taxonomy_dn', 'value', $dns, 'NOT IN', 0)
  ->execute();
  foreach (array_keys($result['taxonomy_term']) as $term) {
    taxonomy_term_delete($term);
    $count++;
  }
  drupal_set_message("Deleted $count obsolete terms.");
}

/**
 * Worker for target group import
 */
function _worker_add_targetgroup($item) {
  $queue = DrupalQueue::get('addLdapTargetGroups', TRUE);
  $newterm = new stdClass();
  $newterm->name = $item['name'];
  $newterm->vid = $item['vid'];
  $newterm->parent[] = 0;
  $field_dn = array();
  $field_dn[LANGUAGE_NONE][0]['value'] = $item['dn'];
  $newterm->field_taxonomy_dn = $field_dn;
  $query = new EntityFieldQuery();
  $result = $query
  ->entityCondition('entity_type', 'taxonomy_term')
  ->propertyCondition('vid', $item['vid'])
  ->fieldCondition('field_taxonomy_dn', 'value', $item['dn'], '=', 0)
  ->execute();
  if(count($result)) {
    $term = array_keys($result['taxonomy_term']);
    $newterm->tid = $term[0];
    if(count($term) > 1) {
      drupal_set_message('There are multiple terms with similar dn in target_groups ('.$item['dn'].')', 'warning');
      array_shift($term);
      foreach($term as $tid) {
        taxonomy_term_delete($tid);
        drupal_set_message('Deleted tid:'.$tid, 'warning');
      }
    }
  }
  $status = taxonomy_term_save($newterm);
  if($status == SAVED_NEW) {
    drupal_set_message("Created new: ".$item['dn']);
  }
  elseif($status == SAVED_UPDATED) {
    drupal_set_message("Updated term : ".$item['dn']);
  }
  else {
    drupal_set_message("Error: Could not add term (rescheduled for adding). ".$item['dn'], 'error');
    $queue->createItem($item);
  }
}

/**
 * Worker for target group delete
 */
function _worker_delete_targetgroup($dns) {
  $voc = taxonomy_vocabulary_machine_name_load('target_groups');
  $terms = taxonomy_get_tree($voc->vid, 0, NULL, TRUE);
  $query = new EntityFieldQuery();
  $result = $query
  ->entityCondition('entity_type', 'taxonomy_term')
  ->propertyCondition('vid', $voc->vid)
  ->fieldCondition('field_taxonomy_dn', 'value', $dns, 'NOT IN', 0)
  ->execute();
  foreach (array_keys($result['taxonomy_term']) as $term) {
    taxonomy_term_delete($term);
    $count++;
  }
  drupal_set_message("Deleted $count obsolete target-groups.");
}

/**
 * Provisioning for the user at login
 */
function alingsasintra_ldap_user_edit_user_alter(&$edit, &$ldap_user, $ldap_server) {
  $groups = array();
  if(isset($ldap_user['attr']['groupmembership']['count']) && $ldap_user['attr']['groupmembership']['count'] > 0) {
    for($i=0; isset($ldap_user['attr']['groupmembership'][$i]); $i++) {
      $groups[] = array('value' => $ldap_user['attr']['groupmembership'][$i]);
    }
    $edit['field_ldap_grupper'][LANGUAGE_NONE] = $groups;
  }
}

/**
 * Implements hook_user_presave().
 * add default role publicist
 */
function alingsasintra_user_presave(&$edit, $account, $category) {

  if($category == 'ldap_user') {
    //Add default role 'publicist'
    $rid = array_search('publicist', user_roles(TRUE));
    if($rid) {
      if(!isset($edit['roles'])) {
        $edit['roles'] = array();
      }
      if(!count($edit['roles']) && $account->uid) {
        $user = user_load($account->uid);
        foreach($user->roles as $key=>$value) {
          $edit['roles'][$key] = $key;
        }
      }
      if(!$edit['roles'][$rid]) {
        $edit['roles'][$rid] = $rid;
      }
    }

    /* Add ldap groups to user */
    $terms = array();
    foreach($edit['field_ldap_grupper'][LANGUAGE_NONE] as $term) {
      $terms[] = $term['value'];
    }
    if(count($terms)) {
      $voc = taxonomy_vocabulary_machine_name_load('organizational_structure');
      $query = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', $voc->vid)
      ->fieldCondition('field_taxonomy_dn', 'value', $terms)
      ->execute();
      $terms = array();
      if (!empty($entities['taxonomy_term'])) {
        $terms = array_keys($entities['taxonomy_term']);
        foreach($terms as &$term) {
          $term = array('tid' => $term);
        }
      }
    }
    $edit['field_organizational_structure'][LANGUAGE_NONE] = $terms;

    /* Add target groups to user */
    $queries = ldap_query_get_queries('ldap_target_groups', 'enabled');
    $queries['ldap_target_groups']->filter = '(member=cn='.$edit['name'].',ou=Users,o=Alingsas)';
    $result = $queries['ldap_target_groups']->query();
    $terms = array();
    for($i = 0; $i < $result['count']; $i++) {
      $terms[] = $result[$i]['dn'];
    }
    if(count($terms)) {
      $voc = taxonomy_vocabulary_machine_name_load('target_groups');
      $query = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', $voc->vid)
      ->fieldCondition('field_taxonomy_dn', 'value', $terms, 'IN')
      ->execute();
      $terms = array();
      if (!empty($entities['taxonomy_term'])) {
        $terms = array_keys($entities['taxonomy_term']);
        foreach($terms as &$term) {
          $term = array('tid' => $term);
        }
      }
    }
    $edit['field_target_groups'][LANGUAGE_NONE] = $terms;
    /* Add mail to user-profile. */
    if(!isset($edit['field_user_email'][LANGUAGE_NONE][0]['value']) || !$edit['field_user_email'][LANGUAGE_NONE][0]['value']){
       unset($edit['field_user_email']);
       $edit['mail'] = $edit['name'].'@alingsas.se';
    }
    else {
      $edit['mail'] = $edit['field_user_email'][LANGUAGE_NONE][0]['value'];
    }

  }

  if(isset($edit['field_organizational_structure']) && isset($edit['field_target_groups'])) {
    /* Add access keys to user-profile. */
    $keys = array();
    foreach($edit['field_organizational_structure'][LANGUAGE_NONE] as $org_item) {
      $keys['o_'.$org_item['tid']] = 1;
      foreach($edit['field_target_groups'][LANGUAGE_NONE] as $tar_item) {
        $keys['o_'.$org_item['tid'].'t_'.$tar_item['tid']] = 1;
      }
    }
    foreach($edit['field_target_groups'][LANGUAGE_NONE] as $tar_item) {
      $keys['t_'.$tar_item['tid']] = 1;
    }

    $edit['field_access_keys'][LANGUAGE_NONE][0]['value'] = serialize(array_keys($keys));
  }

}

function alingsasintra_user_login(&$edit, $account) {

  //See alingsasintra_user_presave

}

/**
 * user profile forms
 */
function alingsasintra_usercontact_form() {
  //creating the form
  drupal_set_title('Redigera dina kontaktuppgifter');
  global $user;
  $account = entity_metadata_wrapper('user', $user);
  $disable_mail = ($user->mail == $account->field_user_email->value());
  $form = array (
      'user_email' => array (
          '#type' => 'textfield',
          '#title' => t('Email'),
          '#default_value' => $account->field_user_email->value(),
          '#disabled' => $disable_mail,
      ),
      'user_phone' => array (
          '#type' => 'textfield',
          '#title' => t('Phone'),
          '#default_value' => $account->field_user_phone->value(),
      ),
      'user_mobile' => array (
          '#type' => 'textfield',
          '#title' => t('Mobile'),
          '#default_value' => $account->field_user_mobile->value(),
      ),
      'user_fax' => array (
          '#type' => 'textfield',
          '#title' => t('Fax'),
          '#default_value' => $account->field_user_fax->value(),
      ),
      'user_address' => array (
          '#type' => 'textarea',
          '#title' => t('Address'),
          '#default_value' => $account->field_user_address->value(),
          '#rows' => 3
      ),
      'submit' => array (
          '#type' => 'submit',
          '#value' => t('Save'),
      ),
  );

  return $form;
}

function alingsasintra_usercontact_form_validate($form, &$form_state){

}

function alingsasintra_usercontact_form_submit($form, &$form_state) {
  global $user;
  $account = entity_metadata_wrapper('user', $user);

  if($user->mail != $account->field_user_email->value()) {
    $account->field_user_email->set($form_state['values']['user_email']);
  }
  $account->field_user_phone->set($form_state['values']['user_phone']);
  $account->field_user_mobile->set($form_state['values']['user_mobile']);
  $account->field_user_fax->set($form_state['values']['user_fax']);
  $account->field_user_address->set($form_state['values']['user_address']);

  $account->save();

  drupal_set_message(t('Your contact information was saved.'));
}

/**
 * Favorites form
 */

function alingsasintra_userfavorites_form() {
  //creating the form
  drupal_set_title('Mina favoriter');
  $jquery_path = drupal_get_path('module', 'jquery_update');
  drupal_add_js($jquery_path . '/replace/ui/ui/jquery.ui.sortable.js', 'file');
  global $user;
  $account = entity_metadata_wrapper('user', $user);

  $form = array();

  $form['#prefix'] = <<<EOF
<div class="m my-news my-fav">
	<div class="m-h">
    	<h2>Redigera favoriter</h2>
    </div>
    <div class="m-c">
    	<ul id="sortable">
EOF;
  $form['#suffix'] = <<<EOF
       </li>
      </ul>
    </div>
</div>
<script type="text/javascript">
jQuery(function(){
	jQuery('.my-fav button.delete').click(function(e){
	  var bookmarkid = jQuery(this).parent().attr('id');
		jQuery.getJSON('/bookmark/' + bookmarkid + '/delete', function(data) {
		  jQuery('#' + bookmarkid).remove();
		});
  });
  jQuery( "#sortable" ).sortable();
  jQuery( "#sortable" ).disableSelection();
});
</script>
EOF;


  foreach ($account->field_bookmarks->getIterator() as $delta => $item) {
    $form['#prefix'] .= '<li id="item-' . $delta . '" class="cf"><a href="' . $item->url->value() . '">' . $item->title->value() . '</a><button class="delete">Ta bort favorit</button></li>';
  }
  $form['#prefix'] .= '<li class="cf">';

  $form['new_item_title'] = array (
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
  );
  $form['new_item_url'] = array (
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#required' => TRUE,
  );
  $form['new_item_option'] = array (
    '#type' => 'checkbox',
    '#title' => t('Open URL in a New Window'),
    '#required' => FALSE,
  );
  $form['submit'] = array (
      '#type' => 'submit',
      '#value' => t('Add'),
  );

  return $form;
}

function alingsasintra_userfavorites_form_validate($form, &$form_state){

}

function alingsasintra_userfavorites_form_submit($form, &$form_state) {
  global $user;
  $account = entity_metadata_wrapper('user', $user);

  $account->field_bookmarks[] = array('title' => $form_state['values']['new_item_title'], 'url' => $form_state['values']['new_item_url'], 'attributes' => array('target' => $form_state['values']['new_item_option']));

  $account->save();

  drupal_set_message(t('Your favorites were saved successfully.'));
}

/**
 * Newsfeed form
 */

function alingsasintra_usernewsfeed_form() {
  //creating the form
  drupal_set_title('Redigera nyhetsflöde');
  global $user;
  $account = entity_metadata_wrapper('user', $user);

  $form = array();

  $form['#prefix'] = <<<EOF
<div class="m my-news my-fav">
	<div class="m-h">
    	<h2>Fasta nyhetsflöde</h2>
    </div>
    <div class="m-c">
    	<ul>
EOF;
  $form['#suffix'] = <<<EOF


</div>
EOF;


  foreach ($account->field_organizational_structure->getIterator() as $delta => $item) {
    $form['#prefix'] .= '<li id="item-' . $delta . '" class="cf">' . $item->name->value(). '<button class="locked">Spärrad</button></li>';
  }


  foreach ($account->field_user_customtags->getIterator() as $delta => $item) {
    $items[] = array('tid' => $item->tid->value());
    $default[] = $item->tid->value();
  }

  $form['#prefix'] .= '</ul></div>';
  $form['field_user_customtags'] = array(
    '#type' => 'hidden',
    '#title' => t('Egna nyhetsflöde'),
    '#required' => FALSE,
    '#default_value' => join(',', $default),
  );
  $form_state = array();

  $form['field_user_customtags'] = term_reference_menu_field_widget_form(
      $form,
      $form_state,
      array('field_name' => 'field_user_customtags'),
      array(), LANGUAGE_NONE, $items, NULL, $form['field_user_customtags']);

  $form['submit'] = array (
      '#type' => 'submit',
      '#value' => t('Save'),
  );
  $form['cancel'] = array (
      '#type' => 'button',
      '#value' => t('Cancel'),
  );

  return $form;
}

function alingsasintra_usernewsfeed_form_validate($form, &$form_state){

}

function alingsasintra_usernewsfeed_form_submit($form, &$form_state) {
  global $user;
  $items = array();
  $account = entity_metadata_wrapper('user', $user);

  foreach($form_state['values']['field_user_customtags'] as $item) {
    $items[] = taxonomy_term_load($item['tid']);
  }
  $account->field_user_customtags->set($items);
  $account->save();
  drupal_set_message(t('Your settings have been saved successfully.'));
}

/**
 * Implementation of hook_form_validate().
 */
function alingsasintra_node_validate($node, $form, &$form_state) {
  if(isset($form['#form_id']) && $form['#form_id'] == 'news_node_form') {
    if($form_state['values']['promote'] == 0) {
      $form_state['values']['field_organizational_structure'][LANGUAGE_NONE] = array();
      $form_state['values']['field_target_groups'][LANGUAGE_NONE] = array();
    }
    elseif($form_state['values']['promote'] && count($form_state['values']['field_organizational_structure'][LANGUAGE_NONE]) <= 0) {
      form_set_error('field_organizational_structure', t('Organization: You have to select at least one item from the list.'));
    }
    elseif($form_state['input']['edit-use_target_groups'] && count($form_state['values']['field_target_groups'][LANGUAGE_NONE]) <= 0) {
      form_set_error('field_target_groups', t('Targetgroup: You have to select at least one item from the list.'));
    }
  }
  elseif(isset($form['#form_id']) && $form['#form_id'] == 'verktyg_node_form') {
    if($form_state['values']['promote'] == 0) {
      $form_state['values']['field_organizational_structure'][LANGUAGE_NONE] = array();
    }
  }
  elseif(isset($form['#form_id']) && $form['#form_id'] == 'event_node_form') {
    if($form_state['values']['promote'] == 0) {
      $form_state['values']['field_organizational_structure'][LANGUAGE_NONE] = array();
    }
  }
  elseif(isset($form['#form_id']) && $form['#form_id'] == 'page_node_form') {
    if($form_state['submit_handlers'][0] != 'node_form_delete_submit' && $form_state['values']['fmenu']['menu_name'] && $form_state['values']['fmenu']['link_title']=='') {
      form_set_error('fmenu', t('You have to provide a name and position for the menu-element.'));
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function alingsasintra_form_alter(&$form, &$form_state, $form_id) {

  //remove all vertical tabs from node forms.
  if (strstr($form_id, '_node_form') == '_node_form') {
    array_walk_recursive($form, '_alingsasintra_replace_vertical_tabs_to_fieldsets');
  }

  //customize news_node_form
  switch($form_id) {

    case 'page_node_form':
      if($form['#action'] == '/node/add/page' && $form_state['submitted'] == FALSE){
        $form['fmenu']['menu_name']['#default_value'] = 'main-menu';
        $form['fmenu']['#suffix'] = <<<EOF
        <script type="text/javascript">jQuery(function(){jQuery('#edit-fmenu-menu-name').change();});</script>
EOF;
      }
      unset($form['options']['#group']);
      $form['options']['#weight'] = 20;
      $form['options']['sticky']['#access'] = FALSE;
      $form['options']['promote']['#access'] = FALSE;
      unset($form['fmenu']['#group']);
      $form['fmenu']['#weight'] = 21;
      $form['fmenu']['#collapsed'] = FALSE;
      $form['additional_settings']['#title'] = t('Additional settings');
      $form['path']['#collapsed'] = TRUE;
      $form['options']['#collapsed'] = TRUE;
      if(!isset($form['options']['field_secure_by_group'])) {
        $form['options']['field_secure_by_group'] = $form['field_secure_by_group'];
        $form['options']['field_secure_by_group']['#weight'] = 13;
        unset($form['field_secure_by_group']);
      }
      if(!isset($form['options']['field_access_groups'])) {
        $form['options']['field_access_groups'] = $form['field_access_groups'];
        $form['options']['field_access_groups']['#weight'] = 14;
        unset($form['field_access_groups']);
        $form['options']['field_access_groups']['#suffix'] = <<<EOF
<script type="text/javascript">
  jQuery(function(){
    if(jQuery('#edit-field-secure-by-group-und').attr('checked')){
      jQuery('#edit-field-access-groups').show();
    }
    else {
      jQuery('#edit-field-access-groups').hide();
    }
	  jQuery('#edit-field-secure-by-group-und').click(function() {
	    if(jQuery('#edit-field-secure-by-group-und').attr('checked')){
	      jQuery('#edit-field-access-groups').slideDown();
	    }
	    else {
	      jQuery('#edit-field-access-groups').slideUp();
	    }
    });
    jQuery('#page-node-form').submit(function(){
       if(jQuery('#edit-field-secure-by-group-und').attr('checked') && jQuery('#edit-field-access-groups-und').val().length <= 0){
         jQuery('#edit-field-access-groups').addClass('tr-error');
         alert('Um Du begränsa tillgång, måste Du också lägga till minst en grupp.');
         jQuery('html, body').animate({
             scrollTop: jQuery("#edit-field-secure-by-group-und").offset().top
         }, 500);
         return false;
       }
    });
  });
</script>
EOF;
      }
      if(!isset($form['options']['field_organizational_structure'])) {
        //$form['options']['field_organizational_structure'] = $form['field_organizational_structure'];
        //$form['options']['field_organizational_structure']['#weight'] = 15;
        //unset($form['field_organizational_structure']);
      }
      $form['field_teaser'][LANGUAGE_NONE]['#collapsible'] = TRUE;
      if($form_state['submitted'] == FALSE) {
        $form['field_teaser'][LANGUAGE_NONE]['#collapsed'] = TRUE;
      }
      //$form['#attached']['js'][] = drupal_get_path('module', 'alingsasintra') . '/unlimited-field-delete.js';
      break;

    case 'notification_node_form':
      $form['comment_settings']['#access'] = FALSE; 
      unset($form['options']['#group']);
      $form['options']['#weight'] = 20;
      $form['options']['sticky']['#access'] = FALSE;
      //$form['field_organizational_structure']['#access'] = FALSE;
      unset($form['fmenu']);
      $form['additional_settings']['#title'] = t('Additional settings');
      $form['path']['#collapsed'] = TRUE;
      $form['options']['#collapsed'] = FALSE;
      $form['options']['promote']['#weight'] = 14;
      $form['options']['promote']['#title'] = 'Begränsa målgrupp till förvaltning/avdelning<br/>(klicka ur för att skriva en kommungemensam informationsmeddelande)';
      if(!isset($form['options']['field_organizational_structure'])) {
        $form['options']['field_organizational_structure'] = $form['field_organizational_structure'];
        $form['options']['field_organizational_structure']['#weight'] = 15;
        $form['options']['field_organizational_structure']['#suffix'] = <<<EOF
<script type="text/javascript">
  jQuery(function(){
    if(jQuery('#edit-promote').attr('checked')){
      jQuery('#edit-field-organizational-structure').show();
    }
    else {
      jQuery('#edit-field-organizational-structure').hide();
    }
	  jQuery('#edit-promote').click(function() {
	    if(jQuery('#edit-promote').attr('checked')){
	      jQuery('#edit-field-organizational-structure').slideDown();
	    }
	    else {
	      jQuery('#edit-field-organizational-structure').slideUp();
	    }
    });
  });
</script>
EOF;
        unset($form['field_organizational_structure']);
      }

      if(isset($form['field_publishduration'])) {
        $form['options']['field_publishduration'] = $form['field_publishduration'];
        $form['options']['field_publishduration']['#weight'] = 20;
        unset($form['field_publishduration']);
      }
      break;

    case 'news_node_form':
      unset($form['options']['#group']);
      $form['options']['#weight'] = 20;
      $form['options']['sticky']['#access'] = FALSE;
      $form['additional_settings']['#title'] = t('Additional settings');
      $form['path']['#collapsed'] = TRUE;
      $form['options']['#collapsed'] = FALSE;
      $form['options']['status']['#weight'] = 0;
      $form['options']['promote']['#weight'] = 14;
      $form['options']['promote']['#title'] = 'Begränsa målgrupp till förvaltning/avdelning<br/>(klicka ur för att skriva en kommungemensam nyhet)';
      unset($form['options']['sticky']);

      if(!isset($form['options']['field_organizational_structure'])) {
        $form['options']['field_organizational_structure'] = $form['field_organizational_structure'];
        $form['options']['field_organizational_structure']['#weight'] = 19;
        $form['options']['field_organizational_structure']['#suffix'] = <<<EOF
<script type="text/javascript">
  jQuery(function(){
    if(jQuery('#edit-promote').attr('checked')){
      jQuery('#edit-field-organizational-structure').show();
      jQuery('#form-item-use-target-groups').show();
      if(jQuery('#edit-use_target_groups').attr('checked')){
	      jQuery('#edit-field-target-groups').show();
	    }
	    else {
	      jQuery('#edit-field-target-groups').hide();
	    }
    }
    else {
      jQuery('#edit-field-organizational-structure').hide();
      jQuery('#form-item-use-target-groups').hide();
      jQuery('#edit-field-target-groups').hide();
    }
	  jQuery('#edit-promote').click(function() {
	    if(jQuery('#edit-promote').attr('checked')){
	      jQuery('#edit-field-organizational-structure').slideDown();
	      jQuery('#form-item-use-target-groups').slideDown();
	      if(jQuery('#edit-use_target_groups').attr('checked')){
	        jQuery('#edit-field-target-groups').slideDown();
	      }
	    }
	    else {
	      jQuery('#edit-field-organizational-structure').slideUp();
	      jQuery('#form-item-use-target-groups').slideUp();
	      jQuery('#edit-field-target-groups').slideUp();
	    }

    });
    jQuery('#edit-use_target_groups').click(function() {
	    if(jQuery('#edit-use_target_groups').attr('checked')){
	      jQuery('#edit-field-target-groups').slideDown();
	    }
	    else {
	      jQuery('#edit-field-target-groups').slideUp();
	    }
    });
  });
</script>
EOF;
        unset($form['field_organizational_structure']);
      }
      if(!isset($form['options']['field_target_groups'])) {
        $form['options']['field_target_groups'] = $form['field_target_groups'];
        $form['options']['field_target_groups']['#weight'] = 20;
        $checked = $form['options']['field_target_groups'][LANGUAGE_NONE]['#default_value'] ? 'checked="checked"' : '';
        $form['options']['field_target_groups']['#prefix'] =<<<EOF
<div class="form-item form-type-checkbox form-item-use-target-groups" id="form-item-use-target-groups">
 <input type="checkbox" id="edit-use_target_groups" name="edit-use_target_groups" value="1" class="form-checkbox" {$checked}>  <label class="option" for="edit-use_target_groups">Begränsa målgrupp ännu mer till roll</label>
</div>
EOF;
        unset($form['field_target_groups']);
      }

      if(isset($form['field_publishdate'])) {
        $form['options']['field_publishdate'] = $form['field_publishdate'];
        $form['options']['field_publishdate']['#weight'] = 20;
        unset($form['field_publishdate']);
      }
      if(isset($form['field_unpublishdate'])) {
        $form['options']['field_unpublishdate'] = $form['field_unpublishdate'];
        $form['options']['field_unpublishdate']['#weight'] = 21;
        unset($form['field_unpublishdate']);
      }
      break;

      case 'verktyg_node_form':
        unset($form['options']['#group']);
        $form['options']['#weight'] = 20;
        $form['options']['sticky']['#access'] = FALSE;
        $form['additional_settings']['#title'] = t('Additional settings');
        $form['path']['#collapsed'] = TRUE;
        $form['options']['#collapsed'] = FALSE;
        $form['options']['status']['#weight'] = 0;
        $form['options']['promote']['#weight'] = 14;
        $form['options']['promote']['#title'] = 'Begränsa målgrupp till förvaltning/avdelning<br/>(klicka ur för att skriva en kommungemensam verktyg)';
        if(!isset($form['options']['field_organizational_structure'])) {
          $form['options']['field_organizational_structure'] = $form['field_organizational_structure'];
          $form['options']['field_organizational_structure']['#weight'] = 19;
          $form['options']['field_organizational_structure']['#suffix'] = <<<EOF
<script type="text/javascript">
  jQuery(function(){
    if(jQuery('#edit-promote').attr('checked')){
      jQuery('#edit-field-organizational-structure').show();
    }
    else {
      jQuery('#edit-field-organizational-structure').hide();
    }
	  jQuery('#edit-promote').click(function() {
	    if(jQuery('#edit-promote').attr('checked')){
	      jQuery('#edit-field-organizational-structure').slideDown();
	    }
	    else {
	      jQuery('#edit-field-organizational-structure').slideUp();
	    }
    });
  });
</script>
EOF;
          unset($form['field_organizational_structure']);
        }
        break;

    case 'event_node_form':
      unset($form['options']['#group']);
      $form['options']['#weight'] = 20;
      $form['options']['sticky']['#access'] = FALSE;
      $form['additional_settings']['#title'] = t('Additional settings');
      $form['path']['#collapsed'] = TRUE;
      $form['options']['#collapsed'] = FALSE;
      $form['options']['status']['#weight'] = 0;
      $form['options']['promote']['#weight'] = 14;
      $form['options']['promote']['#title'] = 'Begränsa målgrupp till förvaltning/avdelning<br/>(klicka ur för att skriva en kommungemensam aktivitet)';
      unset($form['options']['sticky']);

      if(!isset($form['options']['field_organizational_structure'])) {
        $form['options']['field_organizational_structure'] = $form['field_organizational_structure'];
        $form['options']['field_organizational_structure']['#weight'] = 19;
        $form['options']['field_organizational_structure']['#suffix'] = <<<EOF
<script type="text/javascript">
  jQuery(function(){
    if(jQuery('#edit-promote').attr('checked')){
      jQuery('#edit-field-organizational-structure').show();
    }
    else {
      jQuery('#edit-field-organizational-structure').hide();
    }
	  jQuery('#edit-promote').click(function() {
	    if(jQuery('#edit-promote').attr('checked')){
	      jQuery('#edit-field-organizational-structure').slideDown();
	    }
	    else {
	      jQuery('#edit-field-organizational-structure').slideUp();
	    }
    });
  });
</script>
EOF;
        unset($form['field_organizational_structure']);
      }

      //add booking links to location field
      $form['field_event_location']['#suffix'] = '<div class="location-field meta-links"><a href="[provide link in sourcecode]" target="_blank">Sök avtal</a> <a href="[Provide link in sourcecode]" target="_blank">Sök lokal</a></div>';

      break;

    case 'user_profile_form':
      if(isset($form['field_user_customtags'])){
        $form['field_user_customtags']['#access'] = false;
      }
      break;

    case 'user_login':
        $form['name']['#attributes']['autocapitalize'] = "off";
        $form['name']['#attributes']['autocorrect'] = "off";
        $form['pass']['#attributes']['autocapitalize'] = "off";
        $form['pass']['#attributes']['autocorrect'] = "off";
      break;

    case 'webform_node_form':
        //remove comment-options
        if(isset($form['comment_settings']['#access'])) {
          unset($form['comment_settings']);
        }

        //set default menu
        if($form['#action'] == '/node/add/webform' && $form_state['submitted'] == FALSE){
          $form['fmenu']['menu_name']['#default_value'] = 'main-menu';
          $form['fmenu']['#suffix'] = <<<EOF
        <script type="text/javascript">jQuery(function(){jQuery('#edit-fmenu-menu-name').change();});</script>
EOF;
        }
      break;

    case 'views_exposed_form':
       if($form['#action'] == '/sok') {
         $form['#action'] = '/search';
         $form['search_target'] = array(
             '#type' => 'select',
             '#title' => t('Type'),
             '#options' => array(
                 'content' => t('Content'),
                 'person' => t('Persons'),
                 'document' => t('Documents'),
             ),
             '#default_value' => 'content',
             '#weight' => -1,
         );
         // Create widget from new form item and place it as a second element.
         $form['#info']['search_target'] = array(
             'value' => 'search_target',
         );
       }
       elseif($form['#action'] == '/sok-anvandare') {
         $form['#action'] = '/search';
         $form['search_target'] = array(
             '#type' => 'select',
             '#title' => t('Type'),
             '#options' => array(
                 'content' => t('Content'),
                 'person' => t('Users'),
                 'document' => t('Documents'),
             ),
             '#default_value' => 'person',
             '#weight' => -1,
         );
         // Create widget from new form item and place it as a second element.
         $form['#info']['search_target'] = array(
             'value' => 'search_target',
         );
       }
      break;

  }
}

function alingsasintra_form_views_exposed_form_search_nodes_search_nodes_alter($form, $form_state, $form_id) {
  //dpm(print_r($form, true));
}


/*
 * Add user default terms to create-news-form
 */
function alingsasintra_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {


}


/**
 * Disable Vertical Tabs
 *
 * @param $item
 * @param $key
 */
function _alingsasintra_replace_vertical_tabs_to_fieldsets(&$item, $key) {

  if ($item == 'vertical_tabs' && $key == '#type') {
    $item = 'fieldset';
  }

}


function alingsasintra_block_info() {
  $blocks = array();
  $blocks['custom_search'] = array(
    'info' => t('Sökbox'),
    'status' => FALSE,
    'weight' => 0,
  );
  $blocks['local_tasks'] = array(
      'info' => t('Sid aktioner'),
      'status' => 1,
      'region' => 'sidebar_third',
      'weight' => 9,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
  );
  $blocks['news_subnav'] = array(
      'info' => t('News navigation'),
      'status' => FALSE,
      'weight' => 0,
  );
  $blocks['back_subnav'] = array(
      'info' => t('Tillbaka länken i Navigation'),
      'status' => FALSE,
      'weight' => 0,
  );
  $blocks['news_mynews'] = array(
      'info' => t('News block with personalized news-feed.'),
      'status' => FALSE,
      'weight' => 0,
  );
  $blocks['news_publicnews'] = array(
      'info' => t('News block with public news-feed.'),
      'status' => FALSE,
      'weight' => 0,
  );
  $blocks['news_organizationnews'] = array(
      'info' => t('News block with news-feed of organization.'),
      'status' => FALSE,
      'weight' => 0,
  );
  $blocks['alfresco_mydocuments'] = array(
      'info' => t('Alfresco My Documents Dashlet'),
      'status' => FALSE,
      'weight' => 0,
  );
  return $blocks;
}

function alingsasintra_block_view($delta = '') {
  switch ($delta) {
    case 'custom_search':
      $block['content'] = _alingsasintra_block_searchbox();
      return $block;
      break;
    case 'news_subnav':
      $block['content'] = _alingsasintra_block_newsnav();
      return $block;
      break;
    case 'local_tasks':
      $block['content'] = _alingsasintra_block_localtabs();
      return $block;
      break;
    case 'back_subnav':
      $block['content'] = _alingsasintra_block_backnav();
      return $block;
      break;
    case 'news_mynews':
      $block['content'] = _alingsasintra_block_news_mynews();
      return $block;
      break;
    case 'news_publicnews':
      $block['content'] = _alingsasintra_block_news_publicnews();
      return $block;
      break;
    case 'news_organizationnews':
      $block['content'] = _alingsasintra_block_news_organizationnews();
      return $block;
      break;
    case 'alfresco_mydocuments':
      $block['content'] = _alingsasintra_block_alfresco_mydocuments();
      return $block;
      break;
  }
}

function _alingsasintra_block_news_organizationnews() {
  global $user;
  $page = $_GET['page'] ? $_GET['page'] : 0;
  $node = menu_get_object();
  if(isset($node->field_organizational_structure['und']) && count($node->field_organizational_structure['und']) > 0) {
    $term = taxonomy_term_load($node->field_organizational_structure['und'][0]['tid']);
    $items = _alingsasintra_news_query('byorganisation', $user, 10, $page, $term);
    $output = '</div><div class="m news-listing company-news unit"><div class="m-h cf"><h2>Nyheter från '.$term->name.'</h2></div>';
    $pager_items = 5;
    if(count($items['items'])) {
      $output .= '<ul>';
      $nodes = node_load_multiple($items['items']);
      foreach($nodes as $node) {
        $content_array = node_view($node, 'teaser', NULL);
        $output .= '<li class="cf">' . render($content_array) . '</li>';
      }
      $output .= '</ul>';
    }
    else {
      $output .= '<p>Ingen nyheter hittades.</p><br/>';
    }
    $output .= '</div><div>';
    return array('#markup' => $output);
  }
}

function _alingsasintra_block_alfresco_mydocuments() {
  //fetch json array with actual my Documents
  //return block-HTML
}

function _alingsasintra_block_news_mynews() {
  global $user;
  $page = $_GET['page'] ? $_GET['page'] : 0;
  $items = _alingsasintra_news_query('mynews', $user, 10, $page);
  $output = '<div class="m my-news"><div class="m-h"><h2>Mina Nyheter</h2></div><div class="m-c cf">';
  if(count($items['items'])) {
    $output .= '<ul>';
    $nodes = node_load_multiple($items['items']);
    foreach($nodes as $node) {
      $content_array = node_view($node, 'teaser', NULL);
      $output .= '<li class="cf">' . render($content_array) . '</li>';
    }
    $output .= '</ul>';
  }
  if($items['count'] > count($items['items'])) {
    $output .= '<div class="more-link"><a href="/mina-nyheter"><button>Visa fler <span>('.count($items['items']).' av '.$items['count'].')</span></button></a></div>';
    $output .=<<<EOL
<script type="text/javascript">
jQuery(function() {
  var mynews = {page:1, rows:0, all:0, prevent:1};
	mynews.rows = jQuery('div.my-news div.m-c > ul > li').size();
	jQuery('div.my-news .more-link a').click(function(e){
		if(mynews.prevent == 1){
			e.preventDefault();
			jQuery('div.my-news .more-link button').html('Laddar...');
			jQuery.getJSON('/news/get/mynews/' + mynews.page, function(data) {
				mynews.all = data.total_rows;
				jQuery('div.my-news div.m-c > ul').append(data.content);
				mynews.rows = jQuery('div.my-news div.m-c > ul > li').size();
				mynews.page++;
				if(mynews.all <= mynews.rows || mynews.page > 2) {
					mynews.prevent = 0;
					jQuery('div.my-news .more-link button').html('Visa alla <span>(' + mynews.rows + ' av ' + mynews.all + ')</span>');
				}
				else {
					jQuery('div.my-news .more-link button').html('Ladda fler <span>(' + mynews.rows + ' av ' + mynews.all + ')</span>');
				}
			});
		}
	});
});
</script>
EOL;
  }
  $output .= '</div></div>';
  return array('#markup' => $output);
}

function _alingsasintra_block_news_publicnews() {
  global $user;
  $page = $_GET['page'] ? $_GET['page'] : 0;
  $items = _alingsasintra_news_query('publicnews', $user, 10, $page);
  $output = '<div class="m company-news"><div class="m-h cf"><h2>Gemensamma Nyheter</h2></div><div class="m-c cf">';
  if(count($items['items'])) {
    $output .= '<ul>';
    $nodes = node_load_multiple($items['items']);
    foreach($nodes as $node) {
      $content_array = node_view($node, 'teaser', NULL);
      $output .= '<li class="cf">' . render($content_array) . '</li>';
    }
    $output .= '</ul>';
  }
  if($items['count'] > count($items['items'])) {
    $output .= '<div class="more-link"><a href="/news/publicnews"><button>Visa fler <span>('.count($items['items']).' av '.$items['count'].')</span></button></a></div>';
    $output .=<<<EOL
<script type="text/javascript">
jQuery(function() {
  var allnews = {page:1, rows:0, all:0, prevent:1};
	allnews.rows = jQuery('div.company-news div.m-c > ul > li').size();
	jQuery('div.company-news .more-link a').click(function(e){
		if(allnews.prevent == 1){
			e.preventDefault();
			jQuery('div.company-news .more-link button').html('Laddar...');
			jQuery.getJSON('/news/get/publicnews/' + allnews.page, function(data) {
				allnews.all = data.total_rows;
				jQuery('div.company-news div.m-c > ul').append(data.content);
				allnews.rows = jQuery('div.company-news div.m-c > ul > li').size();
				allnews.page++;
				if(allnews.all <= allnews.rows || allnews.page > 2) {
					allnews.prevent = 0;
					jQuery('div.company-news .more-link button').html('Visa alla <span>(' + allnews.rows + ' av ' + allnews.all + ')</span>');
				}
				else {
					jQuery('div.company-news .more-link button').html('Ladda fler <span>(' + allnews.rows + ' av ' + allnews.all + ')</span>');
				}
			});
		}
	});
});
</script>
EOL;
  }
  $output .= '</div></div>';
  return array('#markup' => $output);
}

function _alingsasintra_block_searchbox() {
  $output = '';
  //$form = drupal_get_form('search_form');
  $output = <<<EOL
      <form method="get" action="/sok" id="search-form" class="header-search search" role="search">
						<div>
							<label for="edit-keys" class="structural">Sök på Intranätet</label>
							<input type="search" id="edit-keys" name="search_api_views_fulltext" placeholder="Sök information, personer, dokument etc..." />
							<input type="image" id="search-button" src="/sites/all/themes/alingsasintra/gui/i/search-button.png" alt="Go" />
						</div>
					</form>
EOL;
  return array('#markup' => $output);
}

function _alingsasintra_block_backnav() {

  $output = <<<EOL
   		  <a href="/" class="back">Tillbaka</a>
EOL;
	return array('#markup' => $output);
}

function _alingsasintra_block_newsnav() {
  $items = array(); $items_o = array(); $items_t = array();
  $menu = array();
  if(arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)){
    $node = node_load(arg(1));
    if($node->promote && ($node->type == 'news' || $node->type == 'verktyg') && isset($node->field_organizational_structure[LANGUAGE_NONE]) && count($node->field_organizational_structure[LANGUAGE_NONE])) {
      foreach($node->field_organizational_structure[LANGUAGE_NONE] as $item) {
        $items_o[] = '<li><a href="/news/byterm/'.$item['taxonomy_term']->tid.'">'.$item['taxonomy_term']->name.'</a></li>';
      }
      if(count($items_o)) {
        $items = array_merge(array('<li class="pub-group-title">'.t('Organization').':</li>'), $items_o);
      }
    }
    if($node->promote && ($node->type == 'news' || $node->type == 'verktyg') && isset($node->field_target_groups[LANGUAGE_NONE]) && count($node->field_target_groups[LANGUAGE_NONE])) {
      foreach($node->field_target_groups[LANGUAGE_NONE] as $item) {
        $items_t[] = '<li><a href="/news/byterm/'.$item['taxonomy_term']->tid.'">'.$item['taxonomy_term']->name.'</a></li>';
      }
      if(count($items_t)) {
        $items = array_merge($items, array('<li class="pub-group-title">'.t('Targetgroup').':</li>'), $items_t);
      }
    }
    if(count($items)) {
      $items = join('', $items);
      $items = <<<EOL
          <li class="pub-unit">
						<ul class="pub-group">
							{$items}
						</ul>
					</li>
EOL;
    }
    else {
      $items = '';
    }
  }

  $author = user_load($node->uid);
  $firstname = $node->name;
  $lastname = '';
  if(isset($author->field_firstname[LANGUAGE_NONE][0]['safe_value']) && $author->field_firstname[LANGUAGE_NONE][0]['safe_value']) {
    $firstname = $author->field_firstname[LANGUAGE_NONE][0]['safe_value'];
  }
  if(isset($author->field_lastname[LANGUAGE_NONE][0]['safe_value']) && $author->field_lastname[LANGUAGE_NONE][0]['safe_value']) {
    $lastname = $author->field_lastname[LANGUAGE_NONE][0]['safe_value'];
  }
  $name = $firstname.' '.$lastname;
  $uid = $node->uid;
  $date = date('d M Y', $node->created);
  $output = <<<EOL
   		  <a href="/" class="back">Tillbaka</a>
				<ul class="pub-meta">
					<li class="pub-name"><strong>Publicerad av:</strong><br/><a href="/user/{$uid}">{$name}</a></li>
					<li class="pub-date"><strong>Datum:</strong> {$date}</li>
					{$items}
				</ul>
EOL;
  return array('#markup' => $output);
}

function _alingsasintra_block_localtabs() {
  $output = '';
  $tasks = menu_local_tabs();
  $menu = '';

  if($tasks['#primary']) {
    unset($tasks['#primary'][0]);
  }

  $actions = menu_local_tasks();
  if($actions['actions']['count']) {
    foreach($actions['actions']['output'] as $item) {
      $tasks['#primary'][] = $item;
    }
  }

  $item = menu_get_item('node/add/news');
  if ($item['access']) {
    $item['title'] = 'Skapa nyhet';
    $item['weight'] = 20;
    $tasks['#primary'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
    );
  }
  $item = menu_get_item('node/add/event');
  if ($item['access']) {
    $item['title'] = 'Skapa aktivitet';
    $item['weight'] = 21;
    $tasks['#primary'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
    );
  }
  $item = menu_get_item('node/add/advert');
  if ($item['access']) {
    $item['title'] = 'Skapa annons';
    $item['weight'] = 22;
    $tasks['#primary'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
    );
  }
  $item = menu_get_item('node/add/page');
  if ($item['access']) {
    $item['title'] = 'Skapa sida';
    $item['weight'] = 23;
    $tasks['#primary'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
    );
  }
  $item = menu_get_item('node/add/verktyg');
  if ($item['access']) {
    $item['title'] = 'Skapa verktygslänk';
    $item['weight'] = 24;
    $tasks['#primary'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
    );
  }
  $item = menu_get_item('node/add/notification');
  if ($item['access']) {
    $item['title'] = 'Skapa informationsmeddelande';
    $item['weight'] = 25;
    $tasks['#primary'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
    );
  }
  $item = menu_get_item('node/add/webform');
  if ($item['access']) {
    $item['title'] = 'Skapa formulär';
    $item['weight'] = 26;
    $tasks['#primary'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
    );
  }
  if($tasks['#primary']) {
    $menu = render($tasks);
    $output = <<<EOL
<div id="edit" class="m toggle-module toggle cf">
	<div class="m-h cf">
		<span class="toggle-icon edit"></span>
		<h2>Publicera innehåll</h2>
	</div>
	<div class="m-c cf">
		<div class="toggle-list">
			<ul>
				{$menu}
			</ul>
		</div>
	</div>
</div>
EOL;
  }
  return array('#markup' => $output);
}

function alingsasintra_clone_node_alter(&$node, $context) {
  //if the cloning node is a page, we have to check if there are teasers
  //and clone them before we clone the new page.
  if(!$node->teasers_cloned && $context['method'] == 'save-edit' && $context['original_node']->type == 'page' && isset($node->field_teaser[LANGUAGE_NONE]) && count($node->field_teaser[LANGUAGE_NONE]) > 0) {
    $new_teasers = array();
    foreach($node->field_teaser[LANGUAGE_NONE] as $teaser) {
      if(node_load($teaser['target_id'])) {
        $new_nid = clone_node_save($teaser['target_id']);
        $new_teasers[] = array('target_id' => $new_nid);
      }
    }
    $node->field_teaser[LANGUAGE_NONE] = $new_teasers;
    $node->teasers_cloned = TRUE;
  }
}
