<?php

/**
 * @file
 * Access restrictions based on groups
 */

return array(
    'Modify page access' => array(
        'title' => t('Restrict page access'),
        'description' => t('Restrict access to pages.'),
    ),
    'View restricted pages' => array(
        'title' => t('View restricted pages'),
        'description' => t('View pages with restricted permissions.'),
    ),
);

function alingsasintra_access_node_access_records($node) {
  // We only care about the node if it has been marked private.
  $grants = false;

  if (isset($node->field_secure_by_group['und'][0]['value'])
      && $node->field_secure_by_group['und'][0]['value']
      && isset($node->field_access_groups['und'][0]['tid'])) {
    // Only published nodes should be viewable by group members 
    if ($node->status) {
      foreach($node->field_access_groups['und'] as $entry) {
        $grants[] = array(
            'realm' => 'alingsasintra_organization',
            'gid' => $entry['tid'],
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 1,
        );
      }
    }
  }
  else {
    //this is a standard node
    //if published show it to all users

    if ($node->status) {
      $grants[] = array(
          'realm' => 'all',
          'gid' => 0,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 1,
      );
    }
  }

  //always show a node to the author
  $grants[] = array(
    'realm' => 'alingsasintra_author',
    'gid' => $node->uid,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 1,
  );
  return $grants;
}

function alingsasintra_access_node_grants($account, $op) {
  /*if (user_access('access private content', $account)) {
    $grants['example'] = array(1);
  }*/
  $grants['all'] = array(0);
  $grants['alingsasintra_author'] = array($account->uid);
  $user = user_load($account->uid);
  if(isset($user->field_organizational_structure['und'][0]['tid'])) {
    $grants['alingsasintra_organization'] = array();
    foreach($user->field_organizational_structure['und'] as $entry) {
      $grants['alingsasintra_organization'][] = $entry['tid'];
    }
  }
  //dpr($grants);
  return $grants;
}

function alingsasintra_access_node_access_records_alter(&$grants, $node) {
  //var_dump($grants); exit;
}

function alingsasintra_access_node_presave($node) {

}

function alingsasintra_access_node_insert($node) {
  _alingsasintra_access_update_keys($node);
}

function alingsasintra_access_node_update($node) {
  _alingsasintra_access_update_keys($node);
}

function alingsasintra_access_node_delete($node) {
  db_delete('alingsasintra_access_keys')
  ->condition('nid', $node->nid)
  ->execute();
}

function _alingsasintra_access_update_keys($node) {
  db_delete('alingsasintra_access_keys')
  ->condition('nid', $node->nid)
  ->execute();
  $keys = array(); $org = array(); $tar = array();
  if(isset($node->field_organizational_structure['und']) && count($node->field_organizational_structure['und'])) {
    $org = $node->field_organizational_structure['und'];
  }
  if(isset($node->field_target_groups['und']) && count($node->field_target_groups['und'])) {
    $tar = $node->field_target_groups['und'];
  }
  //if organization and target groups are defined we add them as an AND relation
  if(count($tar) && count($org)) {
    foreach($org as $org_item) {
      foreach($tar as $tar_item) {
        $keys['o_'.$org_item['tid'].'t_'.$tar_item['tid']] = 1;
      }
    }
  }
  //if only organizations are set add them
  elseif(count($org)) {
    foreach($org as $org_item) {
      $keys['o_'.$org_item['tid']] = 1;
    }
  }
  //if only target groups are set add them
  elseif(count($tar)) {
    foreach($tar as $tar_item) {
      $keys['t_'.$tar_item['tid']] = 1;
    }
  }
  $query = db_insert('alingsasintra_access_keys')->fields(array('nid', 'keystring'));
  foreach (array_keys($keys) as $record) {
    $query->values(array('nid' => $node->nid, 'keystring' =>$record));
  }
  $query->execute();
}

/* TODO: update user access keys when user is modified. */

function alingsasintra_access_user_presave(&$edit, $account, $category) {
  if(isset($edit['field_organizational_structure']) && isset($edit['field_target_groups'])) {
    $keys = array();
    foreach($edit['field_organizational_structure'][LANGUAGE_NONE] as $org_item) {
      $keys['o_'.$org_item['tid']] = 1;
      foreach($edit['field_target_groups'][LANGUAGE_NONE] as $tar_item) {
        $keys['o_'.$org_item['tid'].'t_'.$tar_item['tid']] = 1;
      }
    }
    foreach($edit['field_target_groups'][LANGUAGE_NONE] as $tar_item) {
      $keys['t_'.$tar_item['tid']] = 1;
    }
    //$edit['field_access_keys'][LANGUAGE_NONE][0]['value'] = serialize(array_keys($keys));
  }
}
